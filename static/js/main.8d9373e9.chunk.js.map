{"version":3,"sources":["components/Dice.tsx","components/History.tsx","App.tsx","index.tsx"],"names":["Dice","props","_useState","useState","count","_useState2","Object","slicedToArray","setCount","_useState3","modifier","_useState4","setModifier","react","className","type","min","onChange","event","parseInt","currentTarget","value","toString","onClick","roll","sides","History","_ref","content","randomInt","max","Math","floor","random","App","history","setHistory","time","Date","toLocaleTimeString","modWithoutParens","modifierString","result","concat","firstDie","sum","i","rand","dice","map","die","components_Dice","key","addDice","components_History","ReactDOM","render","react_default","a","createElement","src_App_0","document","getElementById"],"mappings":"8NAgCeA,SAtBqB,SAAAC,GAAS,IAAAC,EACfC,mBAAiBF,EAAMG,MAAQH,EAAMG,MAAQ,GAD9BC,EAAAC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GAClCE,EADkCC,EAAA,GAC3BG,EAD2BH,EAAA,GAAAI,EAETN,mBAAiBF,EAAMS,SAAWT,EAAMS,SAAW,GAF1CC,EAAAL,OAAAC,EAAA,EAAAD,CAAAG,EAAA,GAElCC,EAFkCC,EAAA,GAExBC,EAFwBD,EAAA,GAYzC,OACIE,EAAA,qBAAKC,UAAU,QACXD,EAAA,uBAAOE,KAAK,SAASC,IAAI,IAAIC,SAVjB,SAACC,GACjBV,EAASW,SAASD,EAAME,cAAcC,SASkBA,MAAOjB,EAAMkB,aACjET,EAAA,wBAAQU,QAAS,kBAAMtB,EAAMuB,KAAKpB,EAAOH,EAAMwB,MAAOf,KAAtD,IAAmET,EAAMwB,OACzEZ,EAAA,kCACAA,EAAA,uBAAOE,KAAK,SAASE,SATN,SAACC,GACpBN,EAAYO,SAASD,EAAME,cAAcC,SAQUA,MAAOX,OCXnDgB,EAVyC,SAAAC,GAAe,IAAbC,EAAaD,EAAbC,QACtD,OACIf,EAAA,qBAAKC,UAAU,WACXD,EAAA,yBACKe,KCJXC,EAAY,SAACb,EAAac,GAC5B,OAAOC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMd,EAAM,GAAKA,IAoDzCkB,EAjDO,WAAM,IAAAhC,EACMC,mBAAiB,IADvBE,EAAAC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GACjBiC,EADiB9B,EAAA,GACR+B,EADQ/B,EAAA,GAIlBmB,EAAO,SAACpB,EAAeqB,EAAef,GACxC,IAAM2B,GAAe,IAAIC,MAAOC,mBAAmB,MAC/CC,EAA2B,GAC3BC,EAAyB,GACZ,IAAb/B,IACA+B,EAAiB,OAAS/B,EAAW,IACrC8B,EAAmB9B,EAAW,EAAI,IAAMA,EAAWA,EAASY,YAGhE,IAAIoB,EAAc,IAAAC,OAAON,EAAP,MAAAM,OAAgBvC,EAAhB,KAAAuC,OAAyBlB,GAAzBkB,OAAiCH,EAAjC,MACZI,EAAmBf,EAAU,EAAGJ,GAClCoB,EAAcD,EAAWlC,EAC7BgC,GAAUE,EAEV,IAAK,IAAIE,EAAI,EAAGA,EAAI1C,EAAO0C,IAAK,CAC5B,IAAMC,EAAelB,EAAU,EAAGJ,GAClCoB,GAAOE,EACPL,GAAU,MAAQK,EAQtBX,GALIM,GADU,IAAVtC,GAA4B,IAAbM,EACL,KAGA+B,EAAiB,MAAQI,EAAM,MAE3BF,OAAOR,KAO7B,OACItB,EAAA,qBAAKC,UAAU,OACXD,EAAA,2CACAA,EAAA,qBAAKC,UAAU,OACXD,EAAA,qBAAKC,UAAU,iBARX,SAACkC,GACb,OAAOA,EAAKC,IAAI,SAACC,EAAKJ,GAAN,OAAajC,EAAA,cAACsC,EAAD,CAAM1B,MAAOyB,EAAK1B,KAAMA,EAAM4B,IAAK,QAAUN,MAQ7DO,CAvCM,CAAC,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,OAyCjCxC,EAAA,cAACyC,EAAD,CAAS1B,QAASO,OChDlCoB,IAASC,OAAOC,EAAAC,EAAAC,cAACC,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.8d9373e9.chunk.js","sourcesContent":["import * as React from 'react'\nimport { useState } from 'react'\n\ninterface IDiceProps {\n    sides: number,\n    count?: number,\n    modifier?: number,\n    roll: (count: number, sides: number, modifier: number) => any\n}\n\nconst Dice: React.SFC<IDiceProps> = props => {\n    const [count, setCount] = useState<number>(props.count ? props.count : 1);\n    const [modifier, setModifier] = useState<number>(props.modifier ? props.modifier : 0);\n\n    const changeCount = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setCount(parseInt(event.currentTarget.value));\n    }\n\n    const changeModifier = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setModifier(parseInt(event.currentTarget.value));\n    }\n\n    return (\n        <div className=\"dice\">\n            <input type=\"number\" min=\"1\" onChange={changeCount} value={count.toString()} />\n            <button onClick={() => props.roll(count, props.sides, modifier)}>d{props.sides}</button>\n            <span>  + </span>\n            <input type=\"number\" onChange={changeModifier} value={modifier} />\n        </div>\n    )\n}\n\nexport default Dice;","import * as React from 'react'\n\ninterface IHistoryProps {\n    content: string\n}\n\nconst History: React.FunctionComponent<IHistoryProps> = ({content}) => {\n    return (\n        <div className=\"history\">\n            <pre>\n                {content}\n            </pre>\n        </div>\n    )\n}\n\nexport default History;","import * as React from 'react';\nimport { useState } from 'react';\nimport './App.css';\nimport Dice from './components/Dice'\nimport History from './components/History'\n\nconst randomInt = (min: number, max: number) => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nconst App: React.FC = () => {\n    const [history, setHistory] = useState<string>('');\n    const dice: number[] = [4, 6, 8, 10, 12, 20, 100];\n\n    const roll = (count: number, sides: number, modifier: number) => {\n        const time: string = new Date().toLocaleTimeString('sw');\n        let modWithoutParens: string = '';\n        let modifierString: string = '';\n        if (modifier !== 0) {\n            modifierString = ' + (' + modifier + ')';\n            modWithoutParens = modifier > 0 ? '+' + modifier : modifier.toString();\n        }\n\n        let result: string = `[${time}] ${count}d${sides}${modWithoutParens}: `;\n        const firstDie: number = randomInt(1, sides);\n        let sum: number = firstDie + modifier;\n        result += firstDie;\n        // calculate individual rolls\n        for (let i = 1; i < count; i++) {\n            const rand: number = randomInt(1, sides);\n            sum += rand;\n            result += ' + ' + rand;\n        }\n        if (count === 1 && modifier === 0) {\n            result += '\\n';\n        }\n        else {\n            result += modifierString + ' = ' + sum + '\\n';\n        }\n        setHistory(result.concat(history));\n    }\n\n    const addDice = (dice: number[]) => {\n        return dice.map((die, i) => (<Dice sides={die} roll={roll} key={\"dice-\" + i}/>))\n    }\n\n    return (\n        <div className=\"app\">\n            <h1>RPG Dice Roller</h1>\n            <div className=\"box\">\n                <div className=\"diceContainer\">\n                    {addDice(dice)}\n                </div>\n                <History content={history} />\n            </div>\n        </div>\n    )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}